General Requirements:
- Create a web-based application using the latest Microsoft and Web technologies.
  > Use .NET Core
- Host it on Azure.
- Use open REST API, which can be used by third parties as well (basic CRUD operations)
- Build a simple UI so that the exposed functions can be invoked/tested.
- The system must be able to authenticate users
- The solution’s architecture must support 20k concurrent users and must be available 99% of the time?. // how to test 20k, how to provide that
- For data persistence follow the Repository pattern and provide multiple implementations.
- Every component should implement monitoring and logging, and should be covered with tests. // monitoring, what exactly, how
  > Logging: exception logging, audit logging

Service Layer Requirements
- Create an ASP.NET Core Web API application.
- Create at least one custom middleware.
- Swag up your API using NSwag or Swashbuckle.
- Create Postman scripts to test your API endpoint.
- Create an in-memory implementation of your data persistence layer.
- Cover your business logic with unit and integration tests.

Features fot the notes
It must support the following types of notes:
- textual
- pictures

It must support the following operations:
- add
- delete and restore (N-days trash functionality)
- modify and undo (M-seconds undo functionality)
- bulk mode (easily select multiple items)
- search (think about huge amount of notes containing huge amount of text)
- (optional) modify pictures ("Annotate" or "Markup"): support at least two of the following: free-hand drawing, rectangles, lines, stars
- (optional) sharing notes with other users (by username or email) and with external users (public sharing via "secure" links)
- (optional) set email reminders
